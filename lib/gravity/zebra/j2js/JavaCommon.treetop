grammar JavaCommon
  rule letterOrDigit
    [a-zA-Z] / [0-9]
  end

  rule letter
    [a-zA-Z_$]
  end

  rule binomialOperation
    (arithmeticOperation  / logicalOperation  / bitOperation) '' <JavaExpressionOperator>
  end

  rule logicalOperation
    "&&"  /  "||"  /  "!="  /  "==" /  "<=" /  ">=" / "<" ![<=]  /  ">" ![>=]   
  end

  rule bitOperation
    ("&" ![&=]) / ("|" ![=|]) / (">>>" !"=") / (">>" ![>=]) / ("<<" !"=") / "^"
  end

  rule arithmeticOperation
    ("*" !"=") / ("/" !"=") / ("%" !"=") / ("+" !"=") / ("-" ![=-])
  end

  rule assignmentOperation
      (("=" !"=") / "+=" / "-=" / "*=" / "/=" / "&=" / "|=" / "^=" / "%=" / "<<=" / ">>=" / ">>>=") ''   <JavaExpressionOperator>
  end

  rule prefixOp
    ("++" / "--" / "!" / "~" / "+" / "-") '' <JavaExpressionOperator>
  end

  rule postFixOp
    ("++" / "--") '' <JavaExpressionOperator>
  end

  rule keyword
    (    "assert"      /
         "break"       /
         "case"        /
         "catch"       /
         "class"       /
         "continue"    /
         "default"     /
         "do"          /
         "else"        /
         "enum"        /
         "extends"     /
         "finally"     /
         "final"       /
         "for"         /
         "if"          /
         "implements"  /
         "import"      /
         "interface"   /
         "instanceof"  /
         "new"         /
         "package"     /
         "return"      /
         "static"      /
         # "super"       /
         "switch"      /
         "synchronized"/
         # "this"        /
         "throws"      /
         "throw"       /
         "try"         /
         "void"        /
         "while"         )  !letterOrDigit  
  end

  rule WHILE
    "while" !letterOrDigit
  end

  rule SWITCH
    "switch" !letterOrDigit
  end

  rule ASSERT
    "assert" !letterOrDigit
  end

  rule BREAK
    "break" !letterOrDigit
  end

  rule CASE
    "case" !letterOrDigit
  end

  # rule THIS
  #   "this" !letterOrDigit
  # end
  # 
  # rule SUPER
  #   "super" !letterOrDigit
  # end

  rule CATCH
    "catch" !letterOrDigit
  end

  rule CLASS
    "class" !letterOrDigit
  end

  rule CONTINUE
    "continue" !letterOrDigit
  end

  rule NEW
    "new" !letterOrDigit
  end

  rule DEFAULT
    "default" !letterOrDigit
  end

  rule DO
    "do" !letterOrDigit
  end

  rule ELSE
    "else" !letterOrDigit
  end

  rule EXTENDS
    "extends" !letterOrDigit
  end

  rule FINALLY
    "finally" !letterOrDigit
  end

  rule FINAL
    "final" !letterOrDigit
  end

  rule FOR
    "for" !letterOrDigit
  end

  rule IF
    "if" !letterOrDigit
  end

  rule IMPLEMENTS
    "implements" !letterOrDigit
  end

  rule IMPORT
    "import" !letterOrDigit
  end

  rule INSTANCEOF
    "instanceof" !letterOrDigit
  end

  rule PACKAGE
    "package" !letterOrDigit
  end

  rule INTERFACE
    "interface" !letterOrDigit
  end

  rule RETURN
    "return" !letterOrDigit
  end

  rule SYNCHRONIZED
    "synchronized" !letterOrDigit
  end

  rule THROW
    "throw" !letterOrDigit
  end

  rule THROWS
    "throws" !letterOrDigit
  end

  rule TRY
    "try" !letterOrDigit
  end

  rule VOID
    "void" !letterOrDigit
  end

  rule modifier
      ("public"      /
      "protected"    /
      "private"      /
      "static"       /
      "abstract"     /
      "final"        /
      "native"       /
      "synchronized" /
      "transient"    /
      "volatile"     /
      "strictfp"       ) !letterOrDigit 
  end

  rule qualifiedIdentifier
    identifier ("." identifier)* <JavaPackageIdentifier>
  end

  rule identifier
    !keyword [a-zA-Z] [a-zA-Z0-9_$]*  <JavaIdentifier>
  end

  rule type
    (basicType / qualifiedIdentifier) (gap* dim)* <JavaType>
  end

  rule basicType
    ("byte" / "short" / "char" / "int" / "long" / "float" / "double" / "boolean") !letterOrDigit
  end

  rule classType
    identifier ("." identifier)*
  end

  rule classTypeList
    qualifiedIdentifier (gap* "," gap* qualifiedIdentifier)*
  end

  rule dim
    "[" gap* "]"
  end

  rule package
    PACKAGE gap+ path:qualifiedIdentifier gap* ";" gap* <JavaPackage>
  end

  rule import
    IMPORT gap+ ("static" gap+)? path:qualifiedIdentifier all_classes:(".*")? gap* ";"  <JavaImport>
  end

  rule comma
    gap* "," gap*
  end

  rule comment
    "/*" (!'*/' .)*  "*/"  <JavaComment>
     /
    "//"  (![\r\n] .)*   <JavaComment>
  end

  rule gap
    [ \t\r\n] / comment
  end
end
