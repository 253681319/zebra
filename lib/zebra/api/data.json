{
    "project": {
        "name": "Zebra API",
        "description": "Zebra API library: Rich WEB UI, easy connectivity and OOP",
        "version": "07/2013",
        "url": "http://www.zebkit.com/"
    },
    "files": {
        "canvas.js": {
            "name": "canvas.js",
            "modules": {
                "test": 1
            },
            "classes": {
                "zebra.ui.View": 1,
                "zebra.ui.Render": 1,
                "zebra.ui.Raised": 1,
                "zebra.ui.Sunken": 1,
                "zebra.ui.Etched": 1,
                "zebra.ui.Dotted": 1,
                "zebra.ui.Border": 1,
                "zebra.ui.RoundBorder": 1,
                "zebra.ui.Gradient": 1,
                "zebra.ui.Radial": 1,
                "zebra.ui.Picture": 1,
                "zebra.ui.Pattern": 1,
                "zebra.ui.CompositeView": 1,
                "ViewSet": 1,
                "zebra.ui.ViewSet": 1,
                "zebra.ui.Font": 1,
                "Panel": 1,
                "BaseLayer": 1,
                "RootLayer": 1,
                "ImagePan": 1,
                "Manager": 1,
                "zebra.ui.Manager": 1,
                "PaintManager": 1,
                "zCanvas": 1
            },
            "fors": {},
            "namespaces": {
                "zebra.ui": 1
            }
        },
        "layout.js": {
            "name": "layout.js",
            "modules": {
                "layout": 1
            },
            "classes": {
                "zebra.layout.Layoutable": 1,
                "zebra.layout.StackLayout": 1,
                "zebra.layout.BorderLayout": 1
            },
            "fors": {},
            "namespaces": {
                "zebra.layout": 1
            }
        },
        "ui.js": {
            "name": "ui.js",
            "modules": {
                "ui": 1
            },
            "classes": {
                "zebra.ui.MouseWheelSupport": 1,
                "zebra.ui.CompRender": 1,
                "zebra.ui.TextRender": 1,
                "zebra.ui.BorderPan": 1,
                "zebra.ui.SplitPan": 1,
                "zebra.ui.ScrollPan": 1,
                "zebra.ui.Tabs": 1
            },
            "fors": {
                "zebra.ui.TextRender": 1
            },
            "namespaces": {
                "zebra.ui": 1
            }
        }
    },
    "modules": {
        "ui": {
            "name": "ui",
            "submodules": {},
            "classes": {
                "zebra.ui.View": 1,
                "zebra.ui.Render": 1,
                "zebra.ui.Raised": 1,
                "zebra.ui.Sunken": 1,
                "zebra.ui.Etched": 1,
                "zebra.ui.Dotted": 1,
                "zebra.ui.Border": 1,
                "zebra.ui.RoundBorder": 1,
                "zebra.ui.Gradient": 1,
                "zebra.ui.Radial": 1,
                "zebra.ui.Picture": 1,
                "zebra.ui.Pattern": 1,
                "zebra.ui.MouseWheelSupport": 1,
                "zebra.ui.CompRender": 1,
                "zebra.ui.TextRender": 1,
                "zebra.ui.BorderPan": 1,
                "zebra.ui.SplitPan": 1,
                "zebra.ui.ScrollPan": 1,
                "zebra.ui.Tabs": 1
            },
            "fors": {
                "zebra.ui.TextRender": 1
            },
            "namespaces": {
                "zebra.ui": 1
            },
            "tag": "module",
            "file": "ui.js",
            "line": 2184
        },
        "test": {
            "name": "test",
            "submodules": {},
            "classes": {
                "zebra.ui.CompositeView": 1,
                "ViewSet": 1,
                "zebra.ui.ViewSet": 1,
                "zebra.ui.Font": 1,
                "Panel": 1,
                "BaseLayer": 1,
                "RootLayer": 1,
                "ImagePan": 1,
                "Manager": 1,
                "zebra.ui.Manager": 1,
                "PaintManager": 1,
                "zCanvas": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "canvas.js",
            "line": 2327
        },
        "layout": {
            "name": "layout",
            "submodules": {},
            "classes": {
                "zebra.layout.Layoutable": 1,
                "zebra.layout.StackLayout": 1,
                "zebra.layout.BorderLayout": 1
            },
            "fors": {},
            "namespaces": {
                "zebra.layout": 1
            },
            "tag": "module",
            "file": "layout.js",
            "line": 558
        }
    },
    "classes": {
        "zebra.ui.View": {
            "name": "zebra.ui.View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 46,
            "description": "View class that is designed as a basis for various reusable decorative UI elements implementation"
        },
        "zebra.ui.Render": {
            "name": "zebra.ui.Render",
            "shortname": "Render",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 80,
            "description": "Render class extends \"zebra.ui.View\" class with a notion of target object. Render stores reference  \nto a target that the render knows how to visualize. Basically Render is an object visualizer. For instance,\ndeveloper can implement text, image and so other objects visualizers.",
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Raised": {
            "name": "zebra.ui.Raised",
            "shortname": "Raised",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 116,
            "description": "Raised border view",
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Sunken": {
            "name": "zebra.ui.Sunken",
            "shortname": "Sunken",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 142,
            "description": "Sunken border view",
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Etched": {
            "name": "zebra.ui.Etched",
            "shortname": "Etched",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 172,
            "description": "Etched border view",
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Dotted": {
            "name": "zebra.ui.Dotted",
            "shortname": "Dotted",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 203,
            "description": "Dotted border view",
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Border": {
            "name": "zebra.ui.Border",
            "shortname": "Border",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 274,
            "description": "Border View constructor",
            "extends": "zebra.ui.View",
            "params": [
                {
                    "name": "c",
                    "description": "border color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "border width",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "r",
                    "description": "border corners radius",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebra.ui.RoundBorder": {
            "name": "zebra.ui.RoundBorder",
            "shortname": "RoundBorder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 313,
            "description": "Round border View constructor",
            "extends": "zebra.ui.View",
            "params": [
                {
                    "name": "col",
                    "description": "border color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "size",
                    "description": "border width",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebra.ui.Gradient": {
            "name": "zebra.ui.Gradient",
            "shortname": "Gradient",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 343,
            "description": "Create instance of vertical or linear gradient",
            "extends": "zebra.ui.View",
            "params": [
                {
                    "name": "startColor",
                    "description": "start color",
                    "type": "String"
                },
                {
                    "name": "endColor",
                    "description": "end color",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "type of gradient \"zebra.layout.VERTICAL\" or \"zebra.layout.HORIZONTAL\"",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebra.ui.Radial": {
            "name": "zebra.ui.Radial",
            "shortname": "Radial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 386,
            "description": "Radial gradient view",
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Picture": {
            "name": "zebra.ui.Picture",
            "shortname": "Picture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 416,
            "description": "Create instance of the given image render",
            "extends": "zebra.ui.Render",
            "params": [
                {
                    "name": "img",
                    "description": "the image to be rendered",
                    "type": "Image"
                },
                {
                    "name": "x",
                    "description": "x coordinate of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y coordinate of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "ub",
                    "description": "boolean flag to say if the rendered image has to be double buffered",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebra.ui.Pattern": {
            "name": "zebra.ui.Pattern",
            "shortname": "Pattern",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 493,
            "description": "Pattern render.",
            "extends": "zebra.ui.Render"
        },
        "zebra.ui.CompositeView": {
            "name": "zebra.ui.CompositeView",
            "shortname": "CompositeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "zebra.ui",
            "file": "canvas.js",
            "line": 511,
            "description": "Composite view. The view allows to combine number of views and renders together.",
            "extends": "zebra.ui.View"
        },
        "ViewSet": {
            "name": "ViewSet",
            "shortname": "ViewSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 598,
            "description": "ViewSet view. The view is special view container that includes number of views accessible by a key and allows only one \nview be active. Active is view that is have to be rendered. The view set can be used to store number of\ndecorative elements where only one can be rendered depending from an UI component state.",
            "extends": "zebra.ui.View"
        },
        "zebra.ui.ViewSet": {
            "name": "zebra.ui.ViewSet",
            "shortname": "zebra.ui.ViewSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 637,
            "description": "Create instance of ViewSet that contains the passed set of Views instances",
            "params": [
                {
                    "name": "args",
                    "description": "object that represents Views instances that have to be included in the ViewSet",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "zebra.ui.Font": {
            "name": "toString",
            "shortname": "zebra.ui.Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 807,
            "description": "Returns CSS font representation",
            "params": [
                {
                    "name": "s",
                    "description": "a string",
                    "type": "String"
                },
                {
                    "name": "off",
                    "description": "fist character index",
                    "type": "Integer"
                },
                {
                    "name": "len",
                    "description": "length of substring",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a CSS representation of the given Font",
                "type": "String"
            },
            "itemtype": "method"
        },
        "Panel": {
            "name": "Panel",
            "shortname": "Panel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 1195,
            "extends": "zebra.layout.Layoutable"
        },
        "BaseLayer": {
            "name": "BaseLayer",
            "shortname": "BaseLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 1558,
            "description": "Base layer UI component. Layer is special type of UI components that is used to decouple different \nlogical  UI components types from each other. Zebra Canvas consists from number of layers where only \none can be active at the given point in time. Layers are stretched to fill full canvas size. Every time \nan input event happens system detects an active layer by asking all layers from top to bottom. First \nlayer that wants to catch input gets control. The typical layers examples are window layer, popup menus \nlayer and so on.",
            "extends": "zebra.ui.Panel"
        },
        "RootLayer": {
            "name": "RootLayer",
            "shortname": "RootLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 1595,
            "description": "Root layer implementation. This is the simplest UI layer implementation where the layer always try grabbing all input event",
            "extends": "zebra.ui.BaseLayer"
        },
        "ImagePan": {
            "name": "ImagePan",
            "shortname": "ImagePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 1633,
            "description": "Image panel UI component. The component renders an image.",
            "extends": "zebra.ui.ViewPan"
        },
        "Manager": {
            "name": "Manager",
            "shortname": "Manager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 1656,
            "description": "UI manager class. The class is widely used as base for building various UI managers like paint, focus, event etc."
        },
        "zebra.ui.Manager": {
            "name": "zebra.ui.Manager",
            "shortname": "zebra.ui.Manager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 1662,
            "description": "Construct the manager. Manager is automatically registered as UI events listener for all implement by the manager UI event listeners",
            "is_constructor": 1
        },
        "PaintManager": {
            "name": "PaintManager",
            "shortname": "PaintManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 1680,
            "description": "Paint UI manager abstract class. Extend it and"
        },
        "zCanvas": {
            "name": "zCanvas",
            "shortname": "zCanvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "canvas.js",
            "line": 2327,
            "description": "Canvas zebra UI component. This is one of the key class everybody has to use. The class is a wrapper around HTML Canvas element that \ncatch all native HTML Canvas events and translate it to Zebra UI events. This class is top (in hierarchy) UI component where all \nother UI component start living. Canvas UI component consist form different layer, use \"root\" layer panel to place your UI.",
            "extends": "zebra.ui.Panel"
        },
        "zebra.layout.Layoutable": {
            "name": "zebra.layout.Layoutable",
            "shortname": "Layoutable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "zebra.layout",
            "file": "layout.js",
            "line": 107,
            "description": "Layoutable class defines rectangular component that has elementary metrical properties like width, height and location and can be a participant \nof layout management process. Layoutable component is container that can contains other layoutable component as its children. The children  \ncomponents are ordered by applying a layout manager of its parent component."
        },
        "zebra.layout.StackLayout": {
            "name": "zebra.layout.StackLayout",
            "shortname": "StackLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "zebra.layout",
            "file": "layout.js",
            "line": 525,
            "description": "Layout manager implementation that places layoutbale components on top of each other stretching its to fill\nall available parent component space"
        },
        "zebra.layout.BorderLayout": {
            "name": "zebra.layout.BorderLayout",
            "shortname": "BorderLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "zebra.layout",
            "file": "layout.js",
            "line": 558,
            "description": "Layout manager implementation that logically splits component area into five areas: TOP, BOTTOM, LEFT, RIGHT and CENTER.\nTOP and BOTTOM components are stretched to fill all available space horizontally and are sized to have preferred height horizontally. \nLEFT and RIGHT components are stretched to fill all available space vertically and are sized to have preferred width vertically.\nCENTER component is stretched to occupy all available space taking in account TOP, LEFT, RIGHT and BOTTOM components.\n\n    // create panel with border layout\n    var p = new zebra.ui.Panel(new zebra.layout.BorderLayout());\n    \n    // add children UI components with top, center and left constraints \n    p.add(zebra.layout.TOP,    new zebra.ui.Label(\"Top\"));\n    p.add(zebra.layout.CENTER, new zebra.ui.Label(\"Center\"));\n    p.add(zebra.layout.LEFT,   new zebra.ui.Label(\"Left\"));"
        },
        "zebra.ui.MouseWheelSupport": {
            "name": "zebra.ui.MouseWheelSupport",
            "shortname": "MouseWheelSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "ui.js",
            "line": 27,
            "description": "Mouse wheel support. Installs necessary mouse wheel listeners and handles mouse wheel events\nin Zebra UI."
        },
        "zebra.ui.CompRender": {
            "name": "zebra.ui.CompRender",
            "shortname": "CompRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "ui.js",
            "line": 84,
            "description": "UI component render class. Renders the given target UI component on the given surface using the specified 2D context",
            "extends": "zebra.ui.Render"
        },
        "zebra.ui.TextRender": {
            "name": "zebra.ui.TextRender",
            "shortname": "TextRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "ui.js",
            "line": 151,
            "description": "Text render that expects and draws a text model or a string as its target",
            "extends": "zebra.ui.Render"
        },
        "zebra.ui.BorderPan": {
            "name": "zebra.ui.BorderPan",
            "shortname": "BorderPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "ui.js",
            "line": 976,
            "description": "Border panel UI component. The component render titled border around the given children content UI component.\nBorder title can be placed on top or bottom border line and aligned horizontally (left, center, right). Any \nzebra UI component can be used as a border  title element.",
            "extends": "zebra.ui.Panel"
        },
        "zebra.ui.SplitPan": {
            "name": "zebra.ui.SplitPan",
            "shortname": "SplitPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "ui.js",
            "line": 1222,
            "description": "Splitter panel UI component. The component split it area horizontally or vertically into two parts. Every parts host an \nUI component and size of the parts can be controlled by mouse.",
            "extends": "zebra.ui.Panel"
        },
        "zebra.ui.ScrollPan": {
            "name": "zebra.ui.ScrollPan",
            "shortname": "ScrollPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "ui.js",
            "line": 1915,
            "description": "Scroll UI panel. The component is used to manage scrolling for a children UI component that occupies more space than \nit is available.",
            "extends": "zebra.ui.Panel"
        },
        "zebra.ui.Tabs": {
            "name": "zebra.ui.Tabs",
            "shortname": "Tabs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "zebra.ui",
            "file": "ui.js",
            "line": 2184,
            "description": "Tabs UI panel. The component is used to organize switching between number of pages where every page contains an UI component.",
            "extends": "zebra.ui.Panel"
        }
    },
    "classitems": [
        {
            "file": "canvas.js",
            "line": 58,
            "description": "Return preferred size the view desires to have",
            "itemtype": "method",
            "name": "getPreferredSize",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "zebra.ui.View",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "canvas.js",
            "line": 65,
            "description": "The method is called to render the decorative element on the given surface of the \nspecified UI component",
            "params": [
                {
                    "name": "g",
                    "description": "graphical context",
                    "type": "Canvas 2D context"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "required width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "required height",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "an UI component on which the view element has to be drawn",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "paint",
            "class": "zebra.ui.View",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "canvas.js",
            "line": 89,
            "description": "Target component to be visualized",
            "itemtype": "attribute",
            "name": "target",
            "default": "null",
            "readonly": "",
            "type": "{Object}",
            "class": "zebra.ui.Render",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "canvas.js",
            "line": 100,
            "description": "Set the given target object. The method triggers \"targetWasChanged(oldTarget, newTarget)\" execution if the method is declared. \nDeclare targetWasChanged method to listen target object updating.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "o",
                    "description": "a target object to be visualized",
                    "type": "Object"
                }
            ],
            "class": "zebra.ui.Render",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "canvas.js",
            "line": 245,
            "description": "Defines border outline for the given 2D Canvas context",
            "params": [
                {
                    "name": "g",
                    "description": "",
                    "type": "2D Canvas context"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "required width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "required height",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "target UI component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "outline",
            "return": {
                "description": "true if the outline has to be applied as an UI component shape",
                "type": "Boolean"
            },
            "class": "zebra.ui.Border",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "canvas.js",
            "line": 611,
            "description": "Activate the given view from the given set.",
            "params": [
                {
                    "name": "id",
                    "description": "a key of a view from the set to be activated",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "activate",
            "class": "ViewSet",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 648,
            "description": "Views set",
            "itemtype": "attribute",
            "name": "views",
            "type": "Object",
            "default": "{}",
            "readonly": "",
            "class": "zebra.ui.ViewSet",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 657,
            "description": "Active in the set view",
            "itemtype": "attribute",
            "name": "activeView",
            "type": "View",
            "default": "null",
            "readonly": "",
            "class": "zebra.ui.ViewSet",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1201,
            "description": "UI component border view",
            "itemtype": "attribute",
            "name": "border",
            "default": "null",
            "readonly": "",
            "type": "{View}",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1209,
            "description": "UI component background view",
            "itemtype": "attribute",
            "name": "bg",
            "default": "null",
            "readonly": "",
            "type": "{View}",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1217,
            "description": "UI component enabled state",
            "itemtype": "attribute",
            "name": "isEnabled",
            "default": "true",
            "readonly": "",
            "type": "{Boolean}",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1233,
            "description": "Setup UI component properties",
            "params": [
                {
                    "name": "p",
                    "description": "collection of properties to be applied",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "properties",
            "return": {
                "description": "the class instance itself",
                "type": "Panel"
            },
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1260,
            "description": "Get a children UI component that embeds the given point.",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a children UI component",
                "type": "Panel"
            },
            "itemtype": "method",
            "name": "getComponentAt",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1323,
            "description": "Set the UI component visibility",
            "params": [
                {
                    "name": "b",
                    "description": "a visibility state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setVisible",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1336,
            "description": "Set the UI component enabled state. Using this property an UI component can be excluded from getting input events",
            "params": [
                {
                    "name": "b",
                    "description": "a enabled state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setEnabled",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1351,
            "description": "Set UI component top, left, bottom, right paddings. The paddings are gaps between component border and \npainted area.",
            "params": [
                {
                    "name": "top",
                    "description": "a top padding",
                    "type": "Integer"
                },
                {
                    "name": "left",
                    "description": "a left padding",
                    "type": "Integer"
                },
                {
                    "name": "bottom",
                    "description": "a bottom padding",
                    "type": "Integer"
                },
                {
                    "name": "right",
                    "description": "a right padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPaddings",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1372,
            "description": "Set the UI component top, right, left, bottom paddings to the same given value",
            "params": [
                {
                    "name": "v",
                    "description": "the value that will be set as top, right, left, bottom UI component paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPadding",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1379,
            "description": "Set the border view",
            "params": [
                {
                    "name": "v",
                    "description": "a border view",
                    "type": "View"
                }
            ],
            "itemtype": "method",
            "name": "setBorder",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1408,
            "description": "Set the background. Background can be a color string or a View instance, or a function(g,x,y,w,h,c) that paints the background",
            "params": [
                {
                    "name": "v",
                    "description": "a background",
                    "type": "String|View|Function"
                }
            ],
            "itemtype": "method",
            "name": "setBackground",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1447,
            "description": "Called whenever the UI component gets or looses focus",
            "itemtype": "method",
            "name": "focused",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1461,
            "description": "Request the whole UI component or part of the UI component to be repainted",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y coordinate of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "repaint",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1480,
            "description": "Remove all children UI component",
            "itemtype": "method",
            "name": "removeAll",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1502,
            "description": "Bring the UI component to front of its parent component",
            "itemtype": "method",
            "name": "toFront",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1514,
            "description": "Send the UI component to back of its parent component",
            "itemtype": "method",
            "name": "toBack",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 1526,
            "description": "Set the UI component size to its preferred size",
            "itemtype": "method",
            "name": "toPreferredSize",
            "class": "Panel",
            "module": "test"
        },
        {
            "file": "canvas.js",
            "line": 2930,
            "description": "Stretch Canvas over full screen size",
            "itemtype": "method",
            "name": "fullScreen",
            "class": "zCanvas",
            "module": "test"
        },
        {
            "file": "layout.js",
            "line": 29,
            "description": "Get direct children component",
            "2param": "{Layoutable} child",
            "2return": "{Layoutable}",
            "2for": "getDirectChild()",
            "2method": "getDirectChild",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 115,
            "description": "x coordinate",
            "itemtype": "attribute",
            "name": "x",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 123,
            "description": "y coordinate",
            "itemtype": "attribute",
            "name": "y",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 131,
            "description": "width of rectangular area",
            "itemtype": "attribute",
            "name": "width",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 139,
            "description": "height of rectangular area",
            "itemtype": "attribute",
            "name": "height",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 147,
            "description": "indicates a layoutable component visibility",
            "itemtype": "attribute",
            "name": "isVisible",
            "default": "true",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 155,
            "description": "indicates a layoutable component validity",
            "itemtype": "attribute",
            "name": "isValid",
            "default": "false",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 163,
            "description": "parent of the layoutable component",
            "itemtype": "attribute",
            "name": "parent",
            "default": "null",
            "readonly": "",
            "type": "{Layoutable}",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 171,
            "description": "layout manager that is used to order children layoutable components",
            "itemtype": "attribute",
            "name": "layout",
            "default": "itself",
            "readonly": "",
            "type": "{Layout}",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 185,
            "description": "Find a first children component that satisfies the passed path expression.",
            "params": [
                {
                    "name": "path",
                    "description": "path expression. Path expression is simplified form of XPath-like expression:\n<code>\n   \"/Panel\"  - find first children that is an instance of zebra.ui.Panel\n   \"/Panel[@id='top']\" - find first children that is an instance of zebra.ui.Panel with \"id\" attribute that equals \"top\"\n   \"//Panel\"  - find first children that is an instance of zebra.ui.Panel recursively \n</code>",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "find",
            "return": {
                "description": "found children component or null if no children component can be found",
                "type": "Layoutable"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 207,
            "description": "Find children components that satisfy the passed path expression.",
            "params": [
                {
                    "name": "path",
                    "description": "path expression. Path expression is simplified form of XPath-like expression:\n<code>\n   \"/Panel\"  - find first children that is an instance of zebra.ui.Panel\n   \"/Panel[@id='top']\" - find first children that is an instance of zebra.ui.Panel with \"id\" attribute that equals \"top\"\n   \"//Panel\"  - find first children that is an instance of zebra.ui.Panel recursively \n</code>",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function that is called every time a new children component has been found.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "findAll",
            "return": {
                "description": "return array of found children components if passed function has not been passed",
                "type": "Array"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 245,
            "description": "Invalidate component layout and metrics",
            "itemtype": "method",
            "name": "invalidate",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 255,
            "description": "Force validation of the component metrics and layout if it is not valid",
            "itemtype": "method",
            "name": "validate",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 271,
            "description": "Get preferred size. The preferred size includes  top, left, bottom and right paddings and \nthe size the component wants to have",
            "itemtype": "method",
            "name": "getPreferredSize",
            "return": {
                "description": "return {width:{Integer}, height:{Integer}} object",
                "type": "Object"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 292,
            "description": "Get top padding.",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "top padding in pixel",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 299,
            "description": "Get left padding.",
            "itemtype": "method",
            "name": "getLeft",
            "return": {
                "description": "left padding in pixel",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 306,
            "description": "Get bottom padding.",
            "itemtype": "method",
            "name": "getBottom",
            "return": {
                "description": "bottom padding in pixel",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 313,
            "description": "Get right padding.",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "right padding in pixel",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 320,
            "description": "Set the parent component.",
            "params": [
                {
                    "name": "o",
                    "description": "a parent component",
                    "type": "Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "setParent",
            "access": "protected",
            "tagname": "",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 333,
            "description": "Set the given layout manager that is used to place children component. Layout manager is simple\nclass that defines number of rules concerning the way children components have to be ordered on \nits parent surface.",
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "m",
                    "description": "a layout manager",
                    "type": "Layout"
                }
            ],
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 352,
            "description": "By default layoutbable component itself implements layout manager to order its children components.\nThis method implementation does nothing, so children component will placed according locations and sizes they \nhave set.",
            "itemtype": "method",
            "name": "doLayout",
            "access": "private",
            "tagname": "",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 361,
            "description": "Detect index of a children component.",
            "params": [
                {
                    "name": "c",
                    "description": "a children component",
                    "type": "Layoutbale"
                }
            ],
            "itemtype": "method",
            "name": "indexOf",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 369,
            "description": "Insert the new children component at the given index with the specified layout constraints",
            "params": [
                {
                    "name": "i",
                    "description": "an index at that the new children component has to be inserted",
                    "type": "Integer"
                },
                {
                    "name": "constr",
                    "description": "layout constraints of the new children component",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children layoutable component to be added",
                    "type": "Layoutbale"
                }
            ],
            "return": {
                "description": "just added children layoutable component",
                "type": "Layoutable"
            },
            "itemtype": "method",
            "name": "insert",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 390,
            "description": "Set the layoutable component location. Location is x, y coordinates relatively to a parent component",
            "params": [
                {
                    "name": "xx",
                    "description": "x coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "yy",
                    "description": "y coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setLocation",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 405,
            "description": "Set the layoutable component bounds. Bounds defines the component location and size.",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of the component",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setBounds",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 418,
            "description": "Set the layoutable component size.",
            "params": [
                {
                    "name": "w",
                    "description": "a width of the component",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setSize",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 434,
            "description": "Get a children layoutable component with the given constraints.",
            "params": [
                {
                    "name": "c",
                    "description": "a constraints",
                    "type": "Layoutable"
                }
            ],
            "return": {
                "description": "a children component",
                "type": "Layoutable"
            },
            "itemtype": "method",
            "name": "getByConstraints",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 450,
            "description": "Remove the given children component.",
            "params": [
                {
                    "name": "c",
                    "description": "a children component to be removed",
                    "type": "Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "a removed children component",
                "type": "Layoutable"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 460,
            "description": "Remove a children component at the specified position.",
            "params": [
                {
                    "name": "i",
                    "description": "a children component index at which it has to be removed",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "removeAt",
            "return": {
                "description": "a removed children component",
                "type": "Layoutable"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 476,
            "description": "Set the specified preferred size the component has to have. Component preferred size is important thing that \nis widely used to layout the component. If it is necessary to fix the preferred size it can be done by calling\nthe method. \nwants to have and use it as",
            "params": [
                {
                    "name": "w",
                    "description": "a preferred width. Pass \"-1\" as the argument value to not set preferred width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a preferred height. Pass \"-1\" as the argument value to not set preferred height",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPreferredSize",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 493,
            "description": "Replace a children component with the specified constraints with the given new children component",
            "params": [
                {
                    "name": "constr",
                    "description": "a constraints of a children component to be replaced with a new one",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children component to be set",
                    "type": "Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "set",
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 505,
            "description": "Add the new children component with the given constraints",
            "params": [
                {
                    "name": "constr",
                    "description": "a constrains of a new children component",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children component to be added",
                    "type": "Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "add",
            "return": {
                "description": "added layoutable component",
                "type": "Layoutable"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 576,
            "description": "horizontal gap (space between components)",
            "itemtype": "attribute",
            "name": "hgap",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.BorderLayout",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 584,
            "description": "vertical gap (space between components)",
            "itemtype": "attribute",
            "name": "vgap",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.BorderLayout",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "layout.js",
            "line": 594,
            "description": "Construct the layout with the given vertical and horizontal gaps.",
            "params": [
                {
                    "name": "hgap",
                    "description": "horizontal gap. The gap is a horizontal distance between laid out components",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "vgap",
                    "description": "vertical gap. The gap is a vertical distance between laid out components",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "constructor2": "",
            "class2": "zebra.layout.BorderLayout",
            "class": "zebra.layout.BorderLayout",
            "module": "layout",
            "namespace": "zebra.layout"
        },
        {
            "file": "ui.js",
            "line": 34,
            "description": "Mouse wheel handler",
            "params": [
                {
                    "name": "e",
                    "description": "DOM mouse event object",
                    "type": "MouseWheelEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseWheelMoved",
            "class": "zebra.ui.MouseWheelSupport",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 69,
            "description": "Setup mouse wheel support for the specified \"zebra.ui.zCanvas\" component",
            "params": [
                {
                    "name": "canvas",
                    "description": "a zebra zCanvas UI component",
                    "type": "zebra.ui.zCanvas"
                }
            ],
            "itemtype": "method",
            "name": "setup",
            "class": "zebra.ui.MouseWheelSupport",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 158,
            "description": "UI component that holds the text render",
            "itemtype": "attribute",
            "name": "owner",
            "default": "null",
            "readonly": "",
            "type": "{zebra.ui.Panel}",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 167,
            "description": "Get a line indent",
            "default": "1",
            "return": {
                "description": "line indent",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLineIndent",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 175,
            "description": "Get number of lines of target text",
            "return": {
                "description": "a number of line in the target text",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLines",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 184,
            "description": "Get the given line height in pixels",
            "params": [
                {
                    "name": "l",
                    "description": "a line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a line height in pixels",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLineHeight",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 194,
            "description": "Called whenever an owner UI component has been changed",
            "params": [
                {
                    "name": "v",
                    "description": "a new owner UI component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "ownerChanged",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 201,
            "description": "Paint the specified text line",
            "params": [
                {
                    "name": "g",
                    "description": "graphical 2D context",
                    "type": "2DContext"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "line",
                    "description": "a line number",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "an UI component on that the line has to be rendered",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "paintLine",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 214,
            "description": "Get text line by the given line number",
            "params": [
                {
                    "name": "r",
                    "description": "a line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a text line",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getLine",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 233,
            "description": "Get the rendered target text as string object",
            "return": {
                "description": "rendered text",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 243,
            "description": "Get the given text line width in pixels",
            "params": [
                {
                    "name": "line",
                    "description": "a text line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a text line width in pixels",
                "type": "Inetger"
            },
            "itemtype": "method",
            "name": "lineWidth",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 254,
            "description": "Called every time the target text metrics has to be recalculated",
            "itemtype": "method",
            "name": "recalc",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 279,
            "description": "Text model update listener handler",
            "params": [
                {
                    "name": "src",
                    "description": "text model object",
                    "type": "zebra.data.TextModel"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "off",
                    "description": "an offset starting from that the text has been updated",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a size (in character) of text part that has been updated",
                    "type": "Integer"
                },
                {
                    "name": "ful",
                    "description": "a first affected by the given update line",
                    "type": "Integer"
                },
                {
                    "name": "updatedLines",
                    "description": "a number of text lines that have been affected by text updating",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "textUpdated",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 405,
            "description": "Set the text model content",
            "params": [
                {
                    "name": "s",
                    "description": "a text as string object",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 414,
            "description": "Set the rendered text font.",
            "params": [
                {
                    "name": "f",
                    "description": "a font as CSS string or zebra.ui.Font class instance",
                    "type": "String|zebra.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 428,
            "description": "Set rendered text color",
            "params": [
                {
                    "name": "c",
                    "description": "a text color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        },
        {
            "file": "ui.js",
            "line": 442,
            "description": "Construct render for the given string or text model target object",
            "params": [
                {
                    "name": "text",
                    "description": "a text as string or text model object",
                    "type": "String|zebra.data.TextModel"
                }
            ],
            "is_constructor": 1,
            "class": "zebra.ui.TextRender",
            "module": "ui",
            "namespace": "zebra.ui"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: 2param",
            "line": " layout.js:29"
        },
        {
            "message": "unknown tag: 2param",
            "line": " layout.js:29"
        },
        {
            "message": "unknown tag: 2return",
            "line": " layout.js:29"
        },
        {
            "message": "unknown tag: 2for",
            "line": " layout.js:29"
        },
        {
            "message": "unknown tag: 2method",
            "line": " layout.js:29"
        },
        {
            "message": "unknown tag: constructor2",
            "line": " layout.js:594"
        },
        {
            "message": "unknown tag: class2",
            "line": " layout.js:594"
        },
        {
            "message": "Missing item type\nGet direct children component",
            "line": " layout.js:29"
        },
        {
            "message": "Missing item type\nConstruct the layout with the given vertical and horizontal gaps.",
            "line": " layout.js:594"
        },
        {
            "message": "Missing item type\nConstruct render for the given string or text model target object",
            "line": " ui.js:442"
        }
    ]
}