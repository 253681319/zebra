grammar JavaLiteral
  rule literal
    charLiteral '' <JavaFixedValue>
    {
        def char?() true; end
    }
    / 
    stringLiteral '' <JavaFixedValue> 
    {
        def str?() true; end
    }
    / 
    hexLiteral '' <JavaFixedValue>
    {
        def hex?() true; end
    }
    / 
    floatLiteral '' <JavaFixedValue>
    {
        def float?() true; end
    }
    / 
    integerLiteral '' <JavaFixedValue>
    {
        def int?() true; end
    }
    / 
    ("true" / "false")  ![a-zA-Z0-9] <JavaFixedValue>
    {
        def bool?() true; end
    }
    /
    "null" ![a-zA-Z0-9] <JavaFixedValue>
    {
        def null?() true; end
    }
  end

  rule integerLiteral
    (hexLiteral / [0-9]+) [lL]?
  end

  rule hexLiteral
    ("0x" / "0X") hexDigit+
  end

  rule floatLiteral
    ([0-9]+ '.' [0-9]* / "." [0-9]+ / [0-9]+) exponent? [fFdD]?
  end

  rule hexDigit
    [a-fA-F0-9]
  end

  rule exponent
    [eE] [+-]? [0-9]+
  end

  rule unicodeEscape
    'u'+ hexDigit hexDigit hexDigit hexDigit
  end

  rule escape
    "\\" ([btnfr\"\\'] / unicodeEscape)
  end

  rule charLiteral
   "'" (escape / ![\'\\] .) "'"
  end

  rule stringLiteral
    "\""  (escape / (![\r\n\"] .))*  "\""
  end
end
